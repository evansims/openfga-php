<?php

declare(strict_types=1);
/**
 * AssertionsApi
 * PHP version 7.2.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * OpenFGA.
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenFGA\API\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\{ErrorPlugin, RedirectPlugin};
use Http\Client\Common\{PluginClient, PluginClientFactory};
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\{HttpAsyncClientDiscovery, Psr17FactoryDiscovery, Psr18ClientDiscovery};
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use InvalidArgumentException;
use OpenFGA\API\{ApiException, Configuration, DebugPlugin, HeaderSelector, ObjectSerializer};
use Psr\Http\Client\{ClientExceptionInterface, ClientInterface};
use Psr\Http\Message\{RequestFactoryInterface, RequestInterface, StreamFactoryInterface, UriFactoryInterface, UriInterface};
use RuntimeException;

use function count;
use function is_array;
use function is_string;
use function sprintf;

/**
 * AssertionsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */
final class AssertionsApi
{
    /**
     * @var Configuration
     */
    private $config;

    /**
     * @var HeaderSelector
     */
    private $headerSelector;

    /**
     * @var int Host index
     */
    private $hostIndex;

    /**
     * @var PluginClient
     */
    private $httpAsyncClient;

    /**
     * @var PluginClient
     */
    private $httpClient;

    /**
     * @var RequestFactoryInterface
     */
    private $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    private $streamFactory;

    /**
     * @var UriFactoryInterface
     */
    private $uriFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0,
    ) {
        $this->config = $config ?? (new Configuration())->setHost('http://localhost');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins ??= [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins,
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins,
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * Operation readAssertions.
     *
     * Read assertions for an authorization model ID
     *
     * @param string $storeId              storeId (required)
     * @param string $authorizationModelId authorizationModelId (required)
     *
     * @throws ApiException             on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return \OpenFGA\API\Model\AbortedMessageResponse|\OpenFGA\API\Model\ForbiddenResponse|\OpenFGA\API\Model\InternalErrorMessageResponse|\OpenFGA\API\Model\PathUnknownErrorMessageResponse|\OpenFGA\API\Model\ReadAssertionsResponse|\OpenFGA\API\Model\UnauthenticatedResponse|\OpenFGA\API\Model\UnprocessableContentMessageResponse|\OpenFGA\API\Model\ValidationErrorMessageResponse
     */
    public function readAssertions($storeId, $authorizationModelId)
    {
        [$response] = $this->readAssertionsWithHttpInfo($storeId, $authorizationModelId);

        return $response;
    }

    /**
     * Operation readAssertionsAsync.
     *
     * Read assertions for an authorization model ID
     *
     * @param string $storeId              (required)
     * @param string $authorizationModelId (required)
     *
     * @throws InvalidArgumentException
     *
     * @return Promise
     */
    public function readAssertionsAsync($storeId, $authorizationModelId)
    {
        return $this->readAssertionsAsyncWithHttpInfo($storeId, $authorizationModelId)
            ->then(
                static fn ($response) => $response[0],
            );
    }

    /**
     * Operation readAssertionsAsyncWithHttpInfo.
     *
     * Read assertions for an authorization model ID
     *
     * @param string $storeId              (required)
     * @param string $authorizationModelId (required)
     *
     * @throws InvalidArgumentException
     *
     * @return Promise
     */
    public function readAssertionsAsyncWithHttpInfo($storeId, $authorizationModelId)
    {
        $returnType = '\OpenFGA\API\Model\ReadAssertionsResponse';
        $request = $this->readAssertionsRequest($storeId, $authorizationModelId);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                static function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function (HttpException $exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $exception->getRequest(), $exception->getResponse(), $exception);
                },
            );
    }

    /**
     * Create request for operation 'readAssertions'.
     *
     * @param string $storeId              (required)
     * @param string $authorizationModelId (required)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function readAssertionsRequest($storeId, $authorizationModelId)
    {
        // verify the required parameter 'storeId' is set
        if (null === $storeId || (is_array($storeId) && 0 === count($storeId))) {
            throw new InvalidArgumentException('Missing the required parameter $storeId when calling readAssertions');
        }
        // verify the required parameter 'authorizationModelId' is set
        if (null === $authorizationModelId || (is_array($authorizationModelId) && 0 === count($authorizationModelId))) {
            throw new InvalidArgumentException('Missing the required parameter $authorizationModelId when calling readAssertions');
        }

        $resourcePath = '/stores/{store_id}/assertions/{authorization_model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if (null !== $storeId) {
            $resourcePath = str_replace(
                '{store_id}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath,
            );
        }
        // path params
        if (null !== $authorizationModelId) {
            $resourcePath = str_replace(
                '{authorization_model_id}',
                ObjectSerializer::toPathValue($authorizationModelId),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart,
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation readAssertionsWithHttpInfo.
     *
     * Read assertions for an authorization model ID
     *
     * @param string $storeId              (required)
     * @param string $authorizationModelId (required)
     *
     * @throws ApiException             on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array of \OpenFGA\API\Model\ReadAssertionsResponse|\OpenFGA\API\Model\ValidationErrorMessageResponse|\OpenFGA\API\Model\UnauthenticatedResponse|\OpenFGA\API\Model\ForbiddenResponse|\OpenFGA\API\Model\PathUnknownErrorMessageResponse|\OpenFGA\API\Model\AbortedMessageResponse|\OpenFGA\API\Model\UnprocessableContentMessageResponse|\OpenFGA\API\Model\InternalErrorMessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readAssertionsWithHttpInfo($storeId, $authorizationModelId)
    {
        $request = $this->readAssertionsRequest($storeId, $authorizationModelId);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();

                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $response->getStatusCode(), (string) $request->getUri()), $request, $response, $e);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $request, null, $e);
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    if ('\OpenFGA\API\Model\ReadAssertionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\ReadAssertionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('\OpenFGA\API\Model\ValidationErrorMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\ValidationErrorMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if ('\OpenFGA\API\Model\UnauthenticatedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\UnauthenticatedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('\OpenFGA\API\Model\ForbiddenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\ForbiddenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if ('\OpenFGA\API\Model\PathUnknownErrorMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\PathUnknownErrorMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 409:
                    if ('\OpenFGA\API\Model\AbortedMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\AbortedMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 422:
                    if ('\OpenFGA\API\Model\UnprocessableContentMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\UnprocessableContentMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 500:
                    if ('\OpenFGA\API\Model\InternalErrorMessageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenFGA\API\Model\InternalErrorMessageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\OpenFGA\API\Model\ReadAssertionsResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\ReadAssertionsResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\ValidationErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\UnauthenticatedResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\ForbiddenResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\PathUnknownErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\AbortedMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\UnprocessableContentMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\InternalErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Operation writeAssertions.
     *
     * Upsert assertions for an authorization model ID
     *
     * @param string                                    $storeId              storeId (required)
     * @param string                                    $authorizationModelId authorizationModelId (required)
     * @param \OpenFGA\API\Model\WriteAssertionsRequest $body                 body (required)
     *
     * @throws ApiException             on non-2xx response
     * @throws InvalidArgumentException
     */
    public function writeAssertions($storeId, $authorizationModelId, $body): void
    {
        $this->writeAssertionsWithHttpInfo($storeId, $authorizationModelId, $body);
    }

    /**
     * Operation writeAssertionsAsync.
     *
     * Upsert assertions for an authorization model ID
     *
     * @param string                                    $storeId              (required)
     * @param string                                    $authorizationModelId (required)
     * @param \OpenFGA\API\Model\WriteAssertionsRequest $body                 (required)
     *
     * @throws InvalidArgumentException
     *
     * @return Promise
     */
    public function writeAssertionsAsync($storeId, $authorizationModelId, $body)
    {
        return $this->writeAssertionsAsyncWithHttpInfo($storeId, $authorizationModelId, $body)
            ->then(
                static fn ($response) => $response[0],
            );
    }

    /**
     * Operation writeAssertionsAsyncWithHttpInfo.
     *
     * Upsert assertions for an authorization model ID
     *
     * @param string                                    $storeId              (required)
     * @param string                                    $authorizationModelId (required)
     * @param \OpenFGA\API\Model\WriteAssertionsRequest $body                 (required)
     *
     * @throws InvalidArgumentException
     *
     * @return Promise
     */
    public function writeAssertionsAsyncWithHttpInfo($storeId, $authorizationModelId, $body)
    {
        $returnType = '';
        $request = $this->writeAssertionsRequest($storeId, $authorizationModelId, $body);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                static fn ($response) => [null, $response->getStatusCode(), $response->getHeaders()],
                static function (HttpException $exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $exception->getRequest(), $exception->getResponse(), $exception);
                },
            );
    }

    /**
     * Create request for operation 'writeAssertions'.
     *
     * @param string                                    $storeId              (required)
     * @param string                                    $authorizationModelId (required)
     * @param \OpenFGA\API\Model\WriteAssertionsRequest $body                 (required)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function writeAssertionsRequest($storeId, $authorizationModelId, $body)
    {
        // verify the required parameter 'storeId' is set
        if (null === $storeId || (is_array($storeId) && 0 === count($storeId))) {
            throw new InvalidArgumentException('Missing the required parameter $storeId when calling writeAssertions');
        }
        // verify the required parameter 'authorizationModelId' is set
        if (null === $authorizationModelId || (is_array($authorizationModelId) && 0 === count($authorizationModelId))) {
            throw new InvalidArgumentException('Missing the required parameter $authorizationModelId when calling writeAssertions');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new InvalidArgumentException('Missing the required parameter $body when calling writeAssertions');
        }

        $resourcePath = '/stores/{store_id}/assertions/{authorization_model_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // path params
        if (null !== $storeId) {
            $resourcePath = str_replace(
                '{store_id}',
                ObjectSerializer::toPathValue($storeId),
                $resourcePath,
            );
        }
        // path params
        if (null !== $authorizationModelId) {
            $resourcePath = str_replace(
                '{authorization_model_id}',
                ObjectSerializer::toPathValue($authorizationModelId),
                $resourcePath,
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart,
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers,
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('PUT', $uri, $headers, $httpBody);
    }

    /**
     * Operation writeAssertionsWithHttpInfo.
     *
     * Upsert assertions for an authorization model ID
     *
     * @param string                                    $storeId              (required)
     * @param string                                    $authorizationModelId (required)
     * @param \OpenFGA\API\Model\WriteAssertionsRequest $body                 (required)
     *
     * @throws ApiException             on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function writeAssertionsWithHttpInfo($storeId, $authorizationModelId, $body)
    {
        $request = $this->writeAssertionsRequest($storeId, $authorizationModelId, $body);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();

                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $response->getStatusCode(), (string) $request->getUri()), $request, $response, $e);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $request, null, $e);
            }

            $statusCode = $response->getStatusCode();

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\ValidationErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\UnauthenticatedResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\ForbiddenResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\PathUnknownErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\AbortedMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\UnprocessableContentMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenFGA\API\Model\InternalErrorMessageResponse',
                        $e->getResponseHeaders(),
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * @param string                      $method
     * @param string|UriInterface         $uri
     * @param array                       $headers
     * @param null|StreamInterface|string $body
     *
     * @return RequestInterface
     */
    private function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body,
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body,
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams,
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }
}
