<?php

declare(strict_types=1);
/**
 * ApiException
 * PHP version 7.2.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * OpenFGA.
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenFGA\API;

use Exception;
use Http\Client\Exception\RequestException;
use Psr\Http\Message\{RequestInterface, ResponseInterface};
use stdClass;

/**
 * ApiException Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */
final class ApiException extends RequestException
{
    /**
     * The HTTP body of the server response either as Json or string.
     *
     * @var null|string
     */
    protected $responseBody;

    /**
     * The HTTP header of the server response.
     *
     * @var null|string[][]
     */
    protected $responseHeaders;

    /**
     * The deserialized response object.
     *
     * @var null|stdClass|string
     */
    protected $responseObject;

    public function __construct(
        $message,
        RequestInterface $request,
        ?ResponseInterface $response = null,
        ?Exception $previous = null,
    ) {
        parent::__construct($message, $request, $previous);
        if ($response) {
            $this->responseHeaders = $response->getHeaders();
            $this->responseBody = (string) $response->getBody();
            $this->code = $response->getStatusCode();
        }
    }

    /**
     * Gets the HTTP body of the server response either as Json or string.
     *
     * @return null|stdClass|string HTTP body of the server response either as \stdClass or string
     */
    public function getResponseBody()
    {
        return $this->responseBody;
    }

    /**
     * Gets the HTTP response header.
     *
     * @return null|string[][] HTTP response header
     */
    public function getResponseHeaders()
    {
        return $this->responseHeaders;
    }

    /**
     * Gets the deseralized response object (during deserialization).
     *
     * @return mixed the deserialized response object
     */
    public function getResponseObject()
    {
        return $this->responseObject;
    }

    /**
     * Sets the deseralized response object (during deserialization).
     *
     * @param mixed $obj Deserialized response object
     */
    public function setResponseObject($obj): void
    {
        $this->responseObject = $obj;
    }
}
