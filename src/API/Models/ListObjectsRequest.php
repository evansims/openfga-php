<?php

declare(strict_types=1);
/**
 * ListObjectsRequest.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * OpenFGA.
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenFGA\API\Models;

use ArrayAccess;
use InvalidArgumentException;
use JsonSerializable;
use OpenFGA\API\ObjectSerializer;
use ReturnTypeWillChange;

use function array_key_exists;
use function count;
use function in_array;

/**
 * ListObjectsRequest Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
final class ListObjectsRequest implements ArrayAccess, JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    private $container = [];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    private array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    private static $attributeMap = [
        'authorizationModelId' => 'authorization_model_id',
        'type' => 'type',
        'relation' => 'relation',
        'user' => 'user',
        'contextualTuples' => 'contextual_tuples',
        'context' => 'context',
        'consistency' => 'consistency',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    private static $getters = [
        'authorizationModelId' => 'getAuthorizationModelId',
        'type' => 'getType',
        'relation' => 'getRelation',
        'user' => 'getUser',
        'contextualTuples' => 'getContextualTuples',
        'context' => 'getContext',
        'consistency' => 'getConsistency',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    private static $openAPIFormats = [
        'authorizationModelId' => null,
        'type' => null,
        'relation' => null,
        'user' => null,
        'contextualTuples' => null,
        'context' => null,
        'consistency' => null,
    ];

    /**
     * The original name of the model.
     *
     * @var string
     */
    private static $openAPIModelName = 'ListObjects_request';

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    private static array $openAPINullables = [
        'authorizationModelId' => false,
        'type' => false,
        'relation' => false,
        'user' => false,
        'contextualTuples' => false,
        'context' => false,
        'consistency' => false,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    private static $openAPITypes = [
        'authorizationModelId' => 'string',
        'type' => 'string',
        'relation' => 'string',
        'user' => 'string',
        'contextualTuples' => '\OpenFGA\API\Models\ContextualTupleKeys',
        'context' => 'object',
        'consistency' => '\OpenFGA\API\Models\ConsistencyPreference',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    private static $setters = [
        'authorizationModelId' => 'setAuthorizationModelId',
        'type' => 'setType',
        'relation' => 'setRelation',
        'user' => 'setUser',
        'contextualTuples' => 'setContextualTuples',
        'context' => 'setContext',
        'consistency' => 'setConsistency',
    ];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authorizationModelId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('relation', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('contextualTuples', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('consistency', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets authorizationModelId.
     *
     * @return null|string
     */
    public function getAuthorizationModelId()
    {
        return $this->container['authorizationModelId'];
    }

    /**
     * Gets consistency.
     *
     * @return null|ConsistencyPreference
     */
    public function getConsistency()
    {
        return $this->container['consistency'];
    }

    /**
     * Gets context.
     *
     * @return null|object
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Gets contextualTuples.
     *
     * @return null|ContextualTupleKeys
     */
    public function getContextualTuples()
    {
        return $this->container['contextualTuples'];
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets relation.
     *
     * @return string
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Gets user.
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['type']) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (null === $this->container['relation']) {
            $invalidProperties[] = "'relation' can't be null";
        }
        if (null === $this->container['user']) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ((mb_strlen($this->container['user']) > 512)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['user']) < 1)) {
            $invalidProperties[] = "invalid value for 'user', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Sets authorizationModelId.
     *
     * @param null|string $authorizationModelId authorizationModelId
     *
     * @return self
     */
    public function setAuthorizationModelId($authorizationModelId)
    {
        if (null === $authorizationModelId) {
            throw new InvalidArgumentException('non-nullable authorizationModelId cannot be null');
        }
        $this->container['authorizationModelId'] = $authorizationModelId;

        return $this;
    }

    /**
     * Sets consistency.
     *
     * @param null|ConsistencyPreference $consistency consistency
     *
     * @return self
     */
    public function setConsistency($consistency)
    {
        if (null === $consistency) {
            throw new InvalidArgumentException('non-nullable consistency cannot be null');
        }
        $this->container['consistency'] = $consistency;

        return $this;
    }

    /**
     * Sets context.
     *
     * @param null|object $context Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.
     *
     * @return self
     */
    public function setContext($context)
    {
        if (null === $context) {
            throw new InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Sets contextualTuples.
     *
     * @param null|ContextualTupleKeys $contextualTuples contextualTuples
     *
     * @return self
     */
    public function setContextualTuples($contextualTuples)
    {
        if (null === $contextualTuples) {
            throw new InvalidArgumentException('non-nullable contextualTuples cannot be null');
        }
        $this->container['contextualTuples'] = $contextualTuples;

        return $this;
    }

    /**
     * Sets relation.
     *
     * @param string $relation relation
     *
     * @return self
     */
    public function setRelation($relation)
    {
        if (null === $relation) {
            throw new InvalidArgumentException('non-nullable relation cannot be null');
        }
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Sets type.
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (null === $type) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Sets user.
     *
     * @param string $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (null === $user) {
            throw new InvalidArgumentException('non-nullable user cannot be null');
        }
        if ((mb_strlen($user) > 512)) {
            throw new InvalidArgumentException('invalid length for $user when calling ListObjectsRequest., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($user) < 1)) {
            throw new InvalidArgumentException('invalid length for $user when calling ListObjectsRequest., must be bigger than or equal to 1.');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * Checks if a property is nullable.
     *
     * @param string $property
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && null === $fields[$variableName]) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Array of nullable properties.
     *
     * @return array
     */
    private static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }
}
