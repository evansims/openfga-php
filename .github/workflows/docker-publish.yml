name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  schedule:
    # Run every Monday at 2 AM UTC to automatically incorporate:
    # - Security patches in base images (PHP, Alpine Linux)
    # - Updated dependencies from composer
    # - Latest OpenFGA and OTEL collector images for testing
    - cron: '0 2 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Docker Hub
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE: evansims/openfga-php-integration-tests
  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE: ${{ github.repository }}-integration-tests

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: docker-publish
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE }}
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Get platform tag
        id: platform
        run: |
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "tag=${PLATFORM_TAG}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.integration
          push: false
          load: true
          tags: local-image:${{ steps.platform.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE }}:buildcache
            type=registry,ref=${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE }}:buildcache
          platforms: ${{ matrix.platform }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Optimize image with Slim
        run: |
          # Pull the Slim Docker image
          docker pull dslim/slim:latest

          # Run slim to optimize the image using Docker
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/workspace \
            dslim/slim:latest build \
            --target local-image:${{ steps.platform.outputs.tag }} \
            --tag local-image-slim:${{ steps.platform.outputs.tag }} \
            --http-probe-off \
            --continue-after 10 \
            --show-clogs \
            --include-path /usr/local/bin/php \
            --include-path /usr/local/lib/php \
            --include-path /app \
            --include-path /tmp \
            --include-path /var/www \
            --include-path /etc/php \
            --include-path /etc/ssl \
            --include-path /etc/ca-certificates \
            --include-path /usr/share/ca-certificates \
            --include-path /lib \
            --include-path /lib64 \
            --include-path /usr/lib \
            --include-path /usr/lib64

      - name: Tag and push slimmed images
        run: |
          # Get all tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"

          # Tag and push each image
          echo "$TAGS" | while IFS= read -r TAG; do
            # Add platform suffix to tag
            PLATFORM_TAG="${TAG}-${{ steps.platform.outputs.tag }}"
            docker tag local-image-slim:${{ steps.platform.outputs.tag }} "$PLATFORM_TAG"
            docker push "$PLATFORM_TAG"
          done

  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: docker-publish
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE }}
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Create and push manifests
        run: |
          # Get all tags from metadata
          TAGS="${{ steps.meta.outputs.tags }}"

          # Create manifest for each tag
          echo "$TAGS" | while IFS= read -r TAG; do
            docker manifest create "$TAG" \
              "${TAG}-linux-amd64" \
              "${TAG}-linux-arm64"

            docker manifest push "$TAG"
          done
